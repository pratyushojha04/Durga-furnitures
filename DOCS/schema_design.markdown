# Durga Handicrafts Schema Design Documentation

This document outlines the MongoDB schema design for the **Durga Handicrafts** project, a web-based furniture store built with FastAPI, MongoDB, Cloudinary, and React. The schema supports product management, user authentication via Google OAuth, and order processing, with a single admin (`pratyushojha77@gmail.com`). The database is named `durga_furniture` and contains collections for products, users, and orders, designed to ensure data integrity, scalability, and alignment with the application's requirements.

## Database Overview
- **Database Name**: `durga_furniture`
- **MongoDB URI**: `mongodb://localhost:27017/durga_furniture`
- **Collections**:
  - `products`: Stores product details, including Cloudinary image URLs.
  - `users`: Stores user information, primarily for authentication and admin checks.
  - `orders`: Stores order details with references to products and users.
- **Design Principles**:
  - **Normalization vs. Denormalization**: Uses a denormalized approach for performance, embedding minimal product details in orders to avoid frequent joins while maintaining references via `ObjectId`.
  - **Scalability**: Indexes on frequently queried fields (e.g., `products._id`, `users.email`) for efficient retrieval.
  - **Data Integrity**: Enforced via Pydantic models in `backend/app/models/product.py` and backend validation logic.
  - **Cloudinary Integration**: Product images stored as Cloudinary URLs in `image_url`.

## Collections

### 1. Products Collection
Stores information about furniture products available in the store.

- **Collection Name**: `products`
- **Purpose**: Manages product data, including name, category, price, stock, and image URL.
- **Schema**:
  ```json
  {
    "_id": ObjectId,              // Unique identifier (MongoDB-generated)
    "name": String,              // Product name (min 3 characters, trimmed)
    "category": String,          // Product category (min 3 characters, trimmed)
    "image_url": String,         // Cloudinary URL (e.g., https://res.cloudinary.com/your-cloud-name/image/upload/v1/durga_furniture/...)
    "price": Number,             // Product price (positive float)
    "stock": Number              // Available stock (integer, >= 0)
  }
  ```
- **Constraints**:
  - `_id`: Auto-generated by MongoDB, unique.
  - `name`: Required, minimum 3 characters (excluding leading/trailing spaces), enforced by Pydantic in `routes/products.py`.
  - `category`: Required, minimum 3 characters, enforced by Pydantic.
  - `image_url`: Required, defaults to `https://res.cloudinary.com/<cloud-name>/image/upload/v1/durga_furniture/default.jpg` if no image is uploaded.
  - `price`: Required, positive float, enforced by Pydantic.
  - `stock`: Optional, defaults to 1, non-negative integer.
- **Indexes**:
  - `db.products.createIndex({"_id": 1})`: For fast lookups by product ID.
  - `db.products.createIndex({"category": 1})`: For filtering by category (e.g., in `/dashboard`).
- **Example Document**:
  ```json
  {
    "_id": "68e501f5460aa9b0aaf15d12",
    "name": "Wooden Temple Almirah",
    "category": "Almirah",
    "image_url": "https://res.cloudinary.com/your-cloud-name/image/upload/v1/durga_furniture/temple-almirah.jpg",
    "price": 15000.0,
    "stock": 10
  }
  ```
- **Usage**:
  - Created/updated via `/api/products` POST (admin only).
  - Deleted via `/api/products/{id}` DELETE (admin only).
  - Retrieved via `/api/products` GET (public, filters by `stock > 0`).
  - Referenced in `orders` collection via `product_id`.

### 2. Users Collection
Stores user information for authentication and authorization.

- **Collection Name**: `users`
- **Purpose**: Manages user data, including email, name, and admin status for Google OAuth authentication.
- **Schema**:
  ```json
  {
    "_id": ObjectId,              // Unique identifier (MongoDB-generated)
    "email": String,             // User email (unique, e.g., pratyushojha77@gmail.com)
    "name": String,              // User name (from Google OAuth)
    "is_admin": Boolean          // True if admin (only for pratyushojha77@gmail.com)
  }
  ```
- **Constraints**:
  - `_id`: Auto-generated, unique.
  - `email`: Required, unique, validated as a valid email address.
  - `name`: Required, sourced from Google OAuth profile.
  - `is_admin`: Defaults to `false`, set to `true` only for `pratyushojha77@gmail.com`.
- **Indexes**:
  - `db.users.createIndex({"email": 1}, {unique: true})`: Ensures unique emails and fast lookup.
- **Example Document**:
  ```json
  {
    "_id": "68e502a3460aa9b0aaf15d13",
    "email": "pratyushojha77@gmail.com",
    "name": "Pratyush Ojha",
    "is_admin": true
  }
  ```
- **Usage**:
  - Created/updated during `/api/auth/login` when a user logs in via Google OAuth.
  - Queried in `/api/auth/me` to retrieve user details.
  - Checked in `utils/auth.py` for admin access to `/products` POST and DELETE.

### 3. Orders Collection
Stores order details, including items purchased and user information.

- **Collection Name**: `orders`
- **Purpose**: Tracks customer orders, linking to products and users.
- **Schema**:
  ```json
  {
    "_id": ObjectId,              // Unique identifier (MongoDB-generated)
    "user_id": ObjectId,         // Reference to users._id
    "items": [                   // Array of order items
      {
        "product_id": ObjectId,  // Reference to products._id
        "quantity": Number,      // Quantity ordered (positive integer)
        "price": Number          // Price at time of order (denormalized)
      }
    ],
    "total": Number,             // Total order amount (sum of item price * quantity)
    "created_at": Date           // Order creation timestamp
  }
  ```
- **Constraints**:
  - `_id`: Auto-generated, unique.
  - `user_id`: Required, references `users._id`.
  - `items`: Required, non-empty array.
  - `items.product_id`: Required, references `products._id`.
  - `items.quantity`: Required, positive integer, validated against `products.stock`.
  - `items.price`: Required, denormalized from `products.price` at order time to preserve historical price.
  - `total`: Required, calculated as sum of `items.price * items.quantity`.
  - `created_at`: Auto-generated, defaults to current timestamp.
- **Indexes**:
  - `db.orders.createIndex({"user_id": 1})`: For fetching user orders.
  - `db.orders.createIndex({"created_at": -1})`: For sorting by recent orders.
- **Example Document**:
  ```json
  {
    "_id": "68e502a3460aa9b0aaf15d14",
    "user_id": "68e502a3460aa9b0aaf15d13",
    "items": [
      {
        "product_id": "68e501f5460aa9b0aaf15d12",
        "quantity": 2,
        "price": 15000.0
      }
    ],
    "total": 30000.0,
    "created_at": "2025-10-09T12:00:00Z"
  }
  ```
- **Usage**:
  - Created via `/api/orders` POST, which validates stock and updates `products.stock`.
  - Queried for order history (not implemented in current routes but can be added as `/api/orders` GET).

## Relationships
- **Users → Orders**: One-to-many (`user_id` in `orders` references `users._id`).
- **Products → Orders**: Many-to-many via `items.product_id` in `orders` referencing `products._id`.
- **Denormalization**: `items.price` in `orders` stores the product price at order time to avoid price change issues.

## Validation
- **Pydantic Models** (in `backend/app/models/product.py`):
  - `Product` model enforces:
    - `name`, `category`: Minimum 3 characters, trimmed.
    - `price`: Positive float.
    - `stock`: Non-negative integer, defaults to 1.
    - `image_url`: Valid URL, defaults to Cloudinary default image.
  - Used in `routes/products.py` for `/api/products` endpoints.
- **Backend Logic**:
  - `routes/products.py`: Validates image uploads (JPEG/PNG, max 5MB) and Cloudinary URLs.
  - `routes/orders.py`: Checks `products.stock` before order creation.
  - `utils/auth.py`: Ensures only `pratyushojha77@gmail.com` can access admin endpoints.

## Cloudinary Integration
- **Image Storage**: Product images are stored in Cloudinary’s `durga_furniture` folder.
- **Default Image**: `https://res.cloudinary.com/<cloud-name>/image/upload/v1/durga_furniture/default.jpg`.
- **Validation**: `routes/products.py` ensures `image_url` is a valid Cloudinary URL or the default.
- **Environment Variables** (in `backend/.env`):
  ```env
  CLOUDINARY_CLOUD_NAME=your-cloud-name
  CLOUDINARY_API_KEY=your-api-key
  CLOUDINARY_API_SECRET=your-api-secret
  ```

## Indexes
- **Performance**:
  - `products._id`, `products.category`: Fast product retrieval and filtering.
  - `users.email`: Unique, fast lookup for authentication.
  - `orders.user_id`, `orders.created_at`: Efficient order queries.
- **Creation**:
  ```javascript
  db.products.createIndex({"_id": 1});
  db.products.createIndex({"category": 1});
  db.users.createIndex({"email": 1}, {unique: true});
  db.orders.createIndex({"user_id": 1});
  db.orders.createIndex({"created_at": -1});
  ```

## Example Database Setup
1. **Connect to MongoDB**:
   ```bash
   mongosh
   use durga_furniture
   ```

2. **Insert Sample Product**:
   ```javascript
   db.products.insertOne({
     name: "Wooden Temple Almirah",
     category: "Almirah",
     image_url: "https://res.cloudinary.com/your-cloud-name/image/upload/v1/durga_furniture/temple-almirah.jpg",
     price: 15000.0,
     stock: 10
   });
   ```

3. **Insert Sample User**:
   ```javascript
   db.users.insertOne({
     email: "pratyushojha77@gmail.com",
     name: "Pratyush Ojha",
     is_admin: true
   });
   ```

4. **Insert Sample Order**:
   ```javascript
   db.orders.insertOne({
     user_id: ObjectId("68e502a3460aa9b0aaf15d13"),
     items: [
       {
         product_id: ObjectId("68e501f5460aa9b0aaf15d12"),
         quantity: 2,
         price: 15000.0
       }
     ],
     total: 30000.0,
     created_at: new Date()
   });
   ```

## Notes
- **Scalability**:
  - Denormalized `items.price` in `orders` avoids price update issues.
  - Indexes ensure fast queries for product listings and user authentication.
- **Data Integrity**:
  - Pydantic models in `routes/products.py` enforce input validation.
  - `utils/file_upload.py` ensures valid Cloudinary URLs.
- **Frontend Integration**:
  - `image_url` used in `Admin.jsx`, `Dashboard.jsx`, `Cart.jsx`, `Checkout.jsx`, `FeaturedProducts.jsx` for product images.
  - `krishna.png` in `frontend/src/assets/` used in `Home.jsx` (not stored in MongoDB).
- **Testing**:
  - Verify schema with `db.products.find()`, `db.users.find()`, `db.orders.find()`.
  - Test `/api/products` POST with an image to ensure Cloudinary URL storage.
  - Check admin restrictions for `pratyushojha77@gmail.com`.
- **Setup**:
  - Backend:
    ```bash
    cd C:\Users\Pratyush Ojha\Documents\projects\Durga-furnitures\backend
    pip install fastapi uvicorn pydantic motor python-dotenv python-jose[cryptography] google-auth-oauthlib python-multipart pillow cloudinary
    uvicorn app.main:app --reload
    ```
  - MongoDB:
    ```bash
    mongosh
    use durga_furniture
    ```